cmake_minimum_required(VERSION 2.8)
cmake_policy(VERSION 2.8.12)

set(LIB_MAJOR_VERSION "1")
set(LIB_MINOR_VERSION "0")
set(LIB_PATCH_VERSION "0")
set(LIB_VERSION_STRING "${LIB_MAJOR_VERSION}.${LIB_MINOR_VERSION}.${LIB_PATCH_VERSION}")

if (CMAKE_VERSION VERSION_LESS 3.0)
  PROJECT(ExtendedAPI)
  set(PROJECT_VERSION_MAJOR "${LIB_MAJOR_VERSION}")
  set(PROJECT_VERSION_MINOR "${LIB_MINOR_VERSION}")
  set(PROJECT_VERSION_PATCH"${LIB_PATCH_VERSION}")
  set(PROJECT_VERSION "${LIB_VERSION_STRING}")
else()
  cmake_policy(SET CMP0048 NEW)
  PROJECT(ExtendedAPI VERSION "${LIB_VERSION_STRING}")
endif()

project(ExtendedAPI)


if ("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
  set(API_IS_MAIN TRUE)
else()
  set(API_IS_MAIN FALSE)
endif()

option(BUILD_SHARED_LIBS "Build shared lib" OFF)
option(BUILD_EXAMPLES "Build examples" ${API_IS_MAIN})

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)

message(STATUS "API_IS_MAIN=${API_IS_MAIN}")
message(STATUS "BUILD_EXAMPLES=${BUILD_EXAMPLES}")

add_subdirectory(src)

if(BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()
